{
    "createDate": "2022-07-20T19:19:41.164Z",
    "modifiedDate": "2022-08-22T09:26:29.289Z",
    "isRemote": false,
    "favorites": 1,
    "parameters": {
        "concurrentUsers": 2
    },
    "sessionSize": 2,
    "testProfiles": [
        {
            "browser": "linux-chrome-stable",
            "location": "East-US",
            "network": "No throttling",
            "firewall": "FW_NO_FW",
            "media": "Salsa-720p.mp4"
        },
        {
            "browser": "linux-chrome-stable",
            "location": "East-US",
            "network": "No throttling",
            "firewall": "FW_NO_FW",
            "media": "Salsa-720p.mp4"
        }
    ],
    "name": "Daily 1-1 SFU Self-Serve",
    "testScript": "const agentName = process.env.RTC_AGENT_NAME;\nconst agentType = Number(process.env.RTC_IN_SESSION_ID);\nconst sec = 1000;\nconst baseURL = process.env.RTC_SERVICE_URL;\n\n// Resolution to get from the camera. \nconst videoWidthMin = 320;\nconst videoHeightMin = 180;\nconst videoWidthIdeal = 1280;\nconst videoHeightIdeal = 720;\nconst videoWidthMax = 3840;\nconst videoHeightMax = 2160;\n\n// SFU mode only\nconst maxScale = 1;\nconst maxFramerate = 30;\nconst maxBitrate = 1700 * 1000;\nconst midScale = 2;\nconst midFramerate = 15;\nconst midBitrate = 200 * 1000;\nconst minScale = 4;\nconst minFramerate = 10;\nconst minBitrate = 80 * 1000;\n// In SFU mode, this limits above layers. In P2P mode, this is the bandwidth cap\nconst setBandwidth = \"NO_CAP\";\n// When to switch to SFU mode\nconst sfuSwitchover = 0.5;\n\n\nconst roomProps = {\n    sfu_switchover: sfuSwitchover,\n};\n\nconst setBandwidthProps = {\n    kbs: setBandwidth,\n};\n\nconst callConfigProps = {\n    dailyConfig: {\n        camSimulcastEncodings: [{\n                maxBitrate: minBitrate,\n                scaleResolutionDownBy: minScale,\n                maxFramerate: minFramerate\n            },\n            {\n                maxBitrate: midBitrate,\n                scaleResolutionDownBy: midScale,\n                maxFramerate: midFramerate\n            },\n\n            {\n                maxBitrate: maxBitrate,\n                scaleResolutionDownBy: maxScale,\n                maxFramerate: maxFramerate\n            }\n        ],\n        userMediaVideoConstraints: {\n            width: {\n                \"min\": videoWidthMin,\n                \"ideal\": videoWidthIdeal,\n                \"max\": videoWidthMax\n            },\n            height: {\n                \"min\": videoHeightMin,\n                \"ideal\": videoHeightIdeal,\n                \"max\": videoHeightMax\n            }\n        },\n        userMediaAudioConstraints: {\n            autoGainControl: true,\n            echoCancellation: true,\n            noiseSuppression: true\n        }\n    }\n}\n\nconst roomPropsData = JSON.stringify(roomProps);\nconst callConfigData = JSON.stringify(callConfigProps);\nconst setBandwidthData = JSON.stringify(setBandwidthProps);\n\n// Creates a room and joins it\nif (agentType === 1) {\n    createAndJoinRoom();\n    return;\n}\n\n// Waits for agent 1 to provide a room URL\nclient\n    .rtcWaitForSessionValue('roomURL', function(url) {\n        joinRoom(agentName, url);\n    }, 30 * sec);\n\n\nfunction createAndJoinRoom(agentName) {\n    setExpectations();\n    const url = `${baseURL}?roomParams=${roomPropsData}&callConfig=${callConfigData}&setBandwidth=${setBandwidthData}`;\n    client\n        .rtcInfo(\"testRTC agent start - agent: %s\", agentName)\n        .pause((500 * agentType) + 10)\n        .rtcProgress(\"Creating call \" + url)\n        .url(url)\n        .waitForElementVisible('#inCall', 120 * sec)\n        .rtcProgress(\"Broadcasting room URL to other agents\")\n        .getText('#inCall', function(result) {\n            // Remove whitespace\n            const roomURL = result.value.replace(/\\s+/g, '');\n            client.rtcInfo('Sending Room URL %s', roomURL)\n                .rtcProgress(\"Waiting @ \" + roomURL)\n                .rtcSetSessionValue(\"roomURL\", roomURL);\n        })\n        .pause(5000)\n        .rtcProgress(\"Starting to test \" + url)\n        // Give some time to collect media stats\n        .pause(60 * sec)\n        .rtcScreenshot('Mid-call')\n        .pause(60 * sec)\n        .rtcProgress(\"Done!\");\n}\n\nfunction joinRoom(agentName, roomURL) {\n    setExpectations();\n\n    const url = `${baseURL}?roomURL=${roomURL}&callConfig=${callConfigData}&setBandwidth=${setBandwidthData}`\n    client\n        .rtcInfo(\"testRTC agent start - agent: %s room: %s\", agentName, roomURL)\n        .pause((500 * agentType) + 10)\n        .rtcProgress(\"Joining \" + url)\n        .url(url)\n        .waitForElementVisible('#inCall', 120 * sec)\n        .pause(5000)\n        .rtcProgress(\"In \" + url)\n\n        // Give some time to collect media stats\n        .pause(60 * sec)\n        .rtcScreenshot('Mid-call')\n        .pause(60 * sec)\n        .rtcProgress(\"Done!\");\n}\n\nfunction setExpectations() {\n    client\n        .rtcSetTestExpectation(\"audio.in >= 1\")\n        .rtcSetTestExpectation(\"audio.out >= 1\")\n        .rtcSetTestExpectation(\"video.in >= 1\")\n        .rtcSetTestExpectation(\"video.out >= 1\")\n        .rtcSetTestExpectation(\"audio.in.bitrate > 0\")\n        .rtcSetTestExpectation(\"audio.out.bitrate > 0\")\n        .rtcSetTestExpectation(\"video.in.bitrate > 0\")\n        .rtcSetTestExpectation(\"video.out.bitrate > 0\")\n        .rtcIgnoreErrorContains(\"AudioContext was not allowed to start\");\n}",
    "webhook": "",
    "def_sort": "daily 1-1 sfu self-serve",
    "__v": 0,
    "runCount": 0,
    "info": "Tests having two sessions join a Daily Call Object SFU call using a self-serve deployment of Daily TestRTC Client",
    "lastRank": null,
    "lastRankDelta": null,
    "stared": false,
    "serviceUrl": "https://YOUR-DEPLOYMENT-URL.com",
    "runOptions": "#getstats",
    "numberOfSessions": 1
}